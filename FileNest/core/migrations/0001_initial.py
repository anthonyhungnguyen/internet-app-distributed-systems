# Generated by Django 5.1.7 on 2025-03-14 19:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StorageNode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=255)),
                ('capacity', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('used_space', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('MAINTENANCE', 'Maintenance')], default='ACTIVE', max_length=20)),
                ('last_heartbeat', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'storage_nodes',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('size', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('checksum', models.CharField(max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'files',
            },
        ),
        migrations.CreateModel(
            name='FileChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sequence', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('size', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('checksum', models.CharField(max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='core.file')),
            ],
            options={
                'db_table': 'file_chunks',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='ChunkLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_verified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(default='AVAILABLE', max_length=20)),
                ('chunk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.filechunk')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.storagenode')),
            ],
            options={
                'db_table': 'chunk_locations',
                'unique_together': {('chunk', 'node')},
            },
        ),
        migrations.AddField(
            model_name='filechunk',
            name='storage_nodes',
            field=models.ManyToManyField(through='core.ChunkLocation', to='core.storagenode'),
        ),
        migrations.AlterUniqueTogether(
            name='filechunk',
            unique_together={('file', 'sequence')},
        ),
    ]
